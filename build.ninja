wflags = -Wall -Wextra -Werror -Wwrite-strings
cflags = -mcpu=cortex-m4 -ffreestanding -ffunction-sections -fdata-sections -g -fdiagnostics-color=always
inc = -I lib/libc/include -I external/lwip/include -I external/cmsis/core/include -I include

rule cc
  command = arm-none-eabi-gcc $wflags $cflags $inc -MD -MQ $out -MF $out.d -c $in -o $out
  depfile = $out.d
  deps = gcc

rule ld
  command = arm-none-eabi-ld -Map=build/$out.map -T src/lpc4367.ld --no-undefined $in -o $out

rule ldr
  command = arm-none-eabi-ld -r $in -o $out

rule obj
  command = arm-none-eabi-objcopy -O binary $in $out

# subninja
subninja external/lwip/lwip.ninja
subninja lib/libc/libc.ninja

# main build
build build/main.o: cc src/main.c
build build/start.o: cc src/start.c
build build/vector_table.o: cc src/vector_table.c
build build/exceptions.o: cc src/exceptions.c
build build/default_handlers.o: cc src/default_handlers.c
build build/cgu.o: cc src/cgu.c
build build/uart.o: cc src/uart.c
build build/scu.o: cc src/scu.c
build build/gpio.o: cc src/gpio.c
build build/timer.o: cc src/timer.c
build build/gpdma.o: cc src/gpdma.c

# elf binary
build kernel.elf: ld build/main.o build/start.o build/vector_table.o build/exceptions.o build/default_handlers.o build/cgu.o build/uart.o build/scu.o build/gpio.o build/timer.o build/gpdma.o

#build/lwip.o build/libc.o

# raw binary
build kernel.bin: obj kernel.elf

build all: phony kernel.bin kernel.elf

default all
